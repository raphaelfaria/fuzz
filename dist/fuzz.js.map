{"version":3,"sources":["fuzz.js","src/item.js","src/result.js","src/fuzz.js"],"names":[],"mappings":"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","file":"fuzz.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  global.Fuzz = factory()\n}(this, function () { 'use strict';\n\n  class Item {\n    constructor(name, index) {\n      this.name = name;\n      this.mainIndex = index;\n      this.weight = 0;\n      this._detailedArray = this._prepareItem();\n    }\n\n    _prepareItem() {\n      function indexIsSectionStart(string, index) {\n        return index === 0 ||\n          (string[index].toUpperCase() === string[index] &&\n            (index === 1 ||\n              string[index - 1].toUpperCase() !== string[index - 1]));\n      }\n\n      return this.name.split('').map((char, index, arr) => {\n        return {\n          index,\n          char,\n          beginSection: indexIsSectionStart(arr, index),\n          weight: 0,\n        };\n      });\n    }\n\n    calcMatch(string) {\n      let matchIndex = [];\n      let searchIndex = -1;\n      let lookUpper = true;\n\n      const l = string.length;\n      const lowerTestName = this.name.toLowerCase();\n\n      for (let i = 0; i < l; i++) {\n        const currentChar = string.charAt(i);\n\n        if (searchIndex >= this.name.length) return false;\n\n        searchIndex = (lookUpper ? this.name : lowerTestName).indexOf(\n          lookUpper ? currentChar.toUpperCase() : currentChar,\n          searchIndex + 1\n        );\n\n        if (searchIndex > -1) {\n          matchIndex.push(searchIndex);\n          continue;\n        }\n\n        if (!lookUpper) {\n          matchIndex = [];\n          break;\n        }\n\n        i -= 1;\n        searchIndex = matchIndex[matchIndex.length - 1] || -1;\n        lookUpper = !lookUpper;\n      }\n\n      this._matched = matchIndex;\n\n      // Calculate rank\n      this._calculateWeight();\n\n      return !!(this._matched.length);\n    }\n\n    _calculateWeight() {\n      let substringSize = 0;\n\n      this.weight = this._matched.reduce((weight, matchIndex, index) => {\n        let weightCalc = weight;\n\n        if (this._detailedArray[matchIndex].beginSection === true) {\n          this._detailedArray[matchIndex].weight = (80 - matchIndex);\n          weightCalc += this._detailedArray[matchIndex].weight;\n\n          if (this._matched[index - 1] === matchIndex - 1) {\n            substringSize++;\n            this._detailedArray[matchIndex].weight += 15 * Math.pow(2, substringSize) - matchIndex;\n            weightCalc += this._detailedArray[matchIndex].weight;\n          }\n        } else if (this._matched[index - 1] === matchIndex - 1) {\n          substringSize++;\n          this._detailedArray[matchIndex].weight = 15 * Math.pow(2, substringSize) - matchIndex;\n          weightCalc += this._detailedArray[matchIndex].weight;\n        } else {\n          this._detailedArray[matchIndex].weight = 10 - matchIndex;\n          weightCalc += this._detailedArray[matchIndex].weight;\n        }\n\n        weightCalc -= ((this.name.length - 1) - this._matched[this._matched.length - 1]);\n\n        return weightCalc;\n      }, 0);\n    }\n  }\n\n  function sortByWeight(a, b) {\n    if (a.weight > b.weight) return -1;\n    if (a.weight < b.weight) return 1;\n    return 0;\n  }\n\n  class Result extends Array {\n    constructor(items) {\n      super();\n\n      if (!items.length) return this;\n\n      this.meta = items.sort(sortByWeight);\n      super.push.apply(this, this.meta.map(item => item.name));\n    }\n  }\n\n  function isArray(item) {\n    return item.constructor === Array ||\n      item instanceof Array ||\n      Array.isArray && Array.isArray(item) && item !== Array.prototype ||\n      /array/i.test(Object.prototype.toString.call(item));\n  }\n\n  class Fuzz extends Array {\n    constructor(collection) {\n      super();\n\n      if (!isArray(collection)) throw new Error('Collection should be an array');\n\n      this.push.apply(this, collection);\n      this.main = this._prepareCollection();\n    }\n\n    parse(item) {\n      return item;\n    }\n\n    _prepareCollection() {\n      return this.map((item, i) => {\n        if (typeof item !== 'string') throw new Error('Items should be strings');\n        return new Item(this.parse(item), i);\n      });\n    }\n\n    match(string) {\n      const query = string.replace(/\\s+/g, '').toLowerCase();\n      const resultArray = this.main\n        .filter(item => item.calcMatch(query));\n\n      return new Result(resultArray);\n    }\n\n    static match(string, collection) {\n      return (new Fuzz(collection)).match(string);\n    }\n  }\n\n  var fuzz = Fuzz;\n\n  return fuzz;\n\n}));\n","class Item {\n  constructor(name, index) {\n    this.name = name;\n    this.mainIndex = index;\n    this.weight = 0;\n    this._detailedArray = this._prepareItem();\n  }\n\n  _prepareItem() {\n    function indexIsSectionStart(string, index) {\n      return index === 0 ||\n        (string[index].toUpperCase() === string[index] &&\n          (index === 1 ||\n            string[index - 1].toUpperCase() !== string[index - 1]));\n    }\n\n    return this.name.split('').map((char, index, arr) => {\n      return {\n        index,\n        char,\n        beginSection: indexIsSectionStart(arr, index),\n        weight: 0,\n      };\n    });\n  }\n\n  calcMatch(string) {\n    let matchIndex = [];\n    let searchIndex = -1;\n    let lookUpper = true;\n\n    const l = string.length;\n    const lowerTestName = this.name.toLowerCase();\n\n    for (let i = 0; i < l; i++) {\n      const currentChar = string.charAt(i);\n\n      if (searchIndex >= this.name.length) return false;\n\n      searchIndex = (lookUpper ? this.name : lowerTestName).indexOf(\n        lookUpper ? currentChar.toUpperCase() : currentChar,\n        searchIndex + 1\n      );\n\n      if (searchIndex > -1) {\n        matchIndex.push(searchIndex);\n        continue;\n      }\n\n      if (!lookUpper) {\n        matchIndex = [];\n        break;\n      }\n\n      i -= 1;\n      searchIndex = matchIndex[matchIndex.length - 1] || -1;\n      lookUpper = !lookUpper;\n    }\n\n    this._matched = matchIndex;\n\n    // Calculate rank\n    this._calculateWeight();\n\n    return !!(this._matched.length);\n  }\n\n  _calculateWeight() {\n    let substringSize = 0;\n\n    this.weight = this._matched.reduce((weight, matchIndex, index) => {\n      let weightCalc = weight;\n\n      if (this._detailedArray[matchIndex].beginSection === true) {\n        this._detailedArray[matchIndex].weight = (80 - matchIndex);\n        weightCalc += this._detailedArray[matchIndex].weight;\n\n        if (this._matched[index - 1] === matchIndex - 1) {\n          substringSize++;\n          this._detailedArray[matchIndex].weight += 15 * Math.pow(2, substringSize) - matchIndex;\n          weightCalc += this._detailedArray[matchIndex].weight;\n        }\n      } else if (this._matched[index - 1] === matchIndex - 1) {\n        substringSize++;\n        this._detailedArray[matchIndex].weight = 15 * Math.pow(2, substringSize) - matchIndex;\n        weightCalc += this._detailedArray[matchIndex].weight;\n      } else {\n        this._detailedArray[matchIndex].weight = 10 - matchIndex;\n        weightCalc += this._detailedArray[matchIndex].weight;\n      }\n\n      weightCalc -= ((this.name.length - 1) - this._matched[this._matched.length - 1]);\n\n      return weightCalc;\n    }, 0);\n  }\n}\n\nexport default Item;\n","function sortByWeight(a, b) {\n  if (a.weight > b.weight) return -1;\n  if (a.weight < b.weight) return 1;\n  return 0;\n}\n\nclass Result extends Array {\n  constructor(items) {\n    super();\n\n    if (!items.length) return this;\n\n    this.meta = items.sort(sortByWeight);\n    super.push.apply(this, this.meta.map(item => item.name));\n  }\n}\n\nexport default Result;\n","import Item from './item';\nimport Result from './result';\n\nfunction isArray(item) {\n  return item.constructor === Array ||\n    item instanceof Array ||\n    Array.isArray && Array.isArray(item) && item !== Array.prototype ||\n    /array/i.test(Object.prototype.toString.call(item));\n}\n\nclass Fuzz extends Array {\n  constructor(collection) {\n    super();\n\n    if (!isArray(collection)) throw new Error('Collection should be an array');\n\n    this.push.apply(this, collection);\n    this.main = this._prepareCollection();\n  }\n\n  parse(item) {\n    return item;\n  }\n\n  _prepareCollection() {\n    return this.map((item, i) => {\n      if (typeof item !== 'string') throw new Error('Items should be strings');\n      return new Item(this.parse(item), i);\n    });\n  }\n\n  match(string) {\n    const query = string.replace(/\\s+/g, '').toLowerCase();\n    const resultArray = this.main\n      .filter(item => item.calcMatch(query));\n\n    return new Result(resultArray);\n  }\n\n  static match(string, collection) {\n    return (new Fuzz(collection)).match(string);\n  }\n}\n\nexport default Fuzz;\n"],"sourceRoot":"/source/"}