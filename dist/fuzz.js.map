{"version":3,"sources":["fuzz.js","src/item.js","src/result.js","src/fuzz.js"],"names":[],"mappings":"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","file":"fuzz.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  global.Fuzz = factory()\n}(this, function () { 'use strict';\n\n  class Item {\n    constructor(name, index) {\n      this.name = name;\n      this.mainIndex = index;\n      this.weight = 0;\n      this.detailedArray = this._prepareItem();\n    }\n\n    _prepareItem() {\n      function indexIsSectionStart(string, index) {\n        return index === 0 ||\n          (string[index].toUpperCase() === string[index] &&\n            (index === 1 ||\n              string[index - 1].toUpperCase() !== string[index - 1]));\n      }\n\n      return this.name.split('').map((char, index, arr) => {\n        return {\n          index,\n          char,\n          beginSection: indexIsSectionStart(arr, index),\n          weight: 0\n        };\n      });\n    }\n\n    calcMatch(string) {\n      let matchIndex = [];\n      let searchIndex = -1;\n      let lookUpper = true;\n      let testName = this.name;\n\n      const l = string.length;\n      const lowerTestName = this.name.toLowerCase();\n\n      for (let i = 0; i < l; i++) {\n        let currentChar = string.charAt(i);\n\n        if (searchIndex >= this.name.length) {\n          return false;\n        }\n\n        searchIndex = (lookUpper ? this.name : lowerTestName).indexOf(\n          lookUpper ? currentChar.toUpperCase() : currentChar,\n          searchIndex + 1\n        );\n\n        if (searchIndex > -1) {\n          matchIndex.push(searchIndex);\n          continue;\n        }\n\n        if (!lookUpper) {\n          matchIndex = [];\n          break;\n        }\n\n        i -= 1;\n        searchIndex = matchIndex[matchIndex.length - 1] || -1;\n        lookUpper = !lookUpper;\n      }\n\n      this.matched = matchIndex;\n\n      // Calculate rank\n      this.calculateWeight();\n\n      return !!(this.matched.length);\n    }\n\n    calculateWeight() {\n      let substringSize = 0;\n\n      this.weight = this.matched.reduce((weight, matchIndex, index) => {\n        if (this.detailedArray[matchIndex].beginSection === true) {\n          this.detailedArray[matchIndex].weight = (80 - matchIndex);\n          weight += this.detailedArray[matchIndex].weight;\n\n          if (this.matched[index - 1] == matchIndex - 1) {\n            substringSize++;\n            this.detailedArray[matchIndex].weight += 15 * Math.pow(2, substringSize) - matchIndex;\n            weight += this.detailedArray[matchIndex].weight;\n          }\n        } else if (this.matched[index - 1] == matchIndex - 1) {\n          substringSize++;\n          this.detailedArray[matchIndex].weight = 15 * Math.pow(2, substringSize) - matchIndex;\n          weight += this.detailedArray[matchIndex].weight;\n        } else {\n          this.detailedArray[matchIndex].weight = 10 - matchIndex;\n          weight += this.detailedArray[matchIndex].weight;\n        }\n\n        weight -= ((this.name.length - 1) - this.matched[this.matched.length - 1]);\n\n        return weight;\n\n      }, 0);\n\n      return this;\n    }\n  }\n\n  class Result extends Array {\n    constructor(items) {\n      super();\n\n      this.meta = [];\n\n      if (items.length) {\n        this.push.apply(this, items);\n      }\n    }\n\n    push(...items) {\n      super.push.apply(this.meta, items);\n      return super.push.apply(this, items.map(item => item.name));\n    }\n  }\n\n  function sortByWeight(a, b) {\n    if (a.weight > b.weight) {\n      return -1;\n    }\n\n    if (a.weight < b.weight) {\n      return 1;\n    }\n\n    return 0;\n  }\n\n  class Fuzz extends Array {\n    constructor(collection, options = {}) {\n      super();\n      this.push.apply(this, collection);\n      this.main = this._prepareCollection();\n\n    }\n\n    parse(item) {\n      return item;\n    }\n\n    _prepareCollection() {\n      return this.map((item, i) => {\n        return new Item(this.parse(item), i);\n      });\n    }\n\n    match(string) {\n      let query = string.replace(/\\s+/g, '').toLowerCase();\n      let resultArray = this.main\n        .filter(item => item.calcMatch(query))\n        .sort(sortByWeight);\n\n      return new Result(resultArray);\n    }\n  }\n\n  Fuzz.match = function(string, collection) {\n    var fuzz = new Fuzz(collection);\n    return fuzz.match(string);\n  };\n\n  var _fuzz = Fuzz;\n\n  return _fuzz;\n\n}));\n","class Item {\n  constructor(name, index) {\n    this.name = name;\n    this.mainIndex = index;\n    this.weight = 0;\n    this.detailedArray = this._prepareItem();\n  }\n\n  _prepareItem() {\n    function indexIsSectionStart(string, index) {\n      return index === 0 ||\n        (string[index].toUpperCase() === string[index] &&\n          (index === 1 ||\n            string[index - 1].toUpperCase() !== string[index - 1]));\n    }\n\n    return this.name.split('').map((char, index, arr) => {\n      return {\n        index,\n        char,\n        beginSection: indexIsSectionStart(arr, index),\n        weight: 0\n      };\n    });\n  }\n\n  calcMatch(string) {\n    let matchIndex = [];\n    let searchIndex = -1;\n    let lookUpper = true;\n    let testName = this.name;\n\n    const l = string.length;\n    const lowerTestName = this.name.toLowerCase();\n\n    for (let i = 0; i < l; i++) {\n      let currentChar = string.charAt(i);\n\n      if (searchIndex >= this.name.length) {\n        return false;\n      }\n\n      searchIndex = (lookUpper ? this.name : lowerTestName).indexOf(\n        lookUpper ? currentChar.toUpperCase() : currentChar,\n        searchIndex + 1\n      );\n\n      if (searchIndex > -1) {\n        matchIndex.push(searchIndex);\n        continue;\n      }\n\n      if (!lookUpper) {\n        matchIndex = [];\n        break;\n      }\n\n      i -= 1;\n      searchIndex = matchIndex[matchIndex.length - 1] || -1;\n      lookUpper = !lookUpper;\n    }\n\n    this.matched = matchIndex;\n\n    // Calculate rank\n    this.calculateWeight();\n\n    return !!(this.matched.length);\n  }\n\n  calculateWeight() {\n    let substringSize = 0;\n\n    this.weight = this.matched.reduce((weight, matchIndex, index) => {\n      if (this.detailedArray[matchIndex].beginSection === true) {\n        this.detailedArray[matchIndex].weight = (80 - matchIndex);\n        weight += this.detailedArray[matchIndex].weight;\n\n        if (this.matched[index - 1] == matchIndex - 1) {\n          substringSize++;\n          this.detailedArray[matchIndex].weight += 15 * Math.pow(2, substringSize) - matchIndex;\n          weight += this.detailedArray[matchIndex].weight;\n        }\n      } else if (this.matched[index - 1] == matchIndex - 1) {\n        substringSize++;\n        this.detailedArray[matchIndex].weight = 15 * Math.pow(2, substringSize) - matchIndex;\n        weight += this.detailedArray[matchIndex].weight;\n      } else {\n        this.detailedArray[matchIndex].weight = 10 - matchIndex;\n        weight += this.detailedArray[matchIndex].weight;\n      }\n\n      weight -= ((this.name.length - 1) - this.matched[this.matched.length - 1]);\n\n      return weight;\n\n    }, 0);\n\n    return this;\n  }\n}\n\nexport default Item;\n","class Result extends Array {\n  constructor(items) {\n    super();\n\n    this.meta = [];\n\n    if (items.length) {\n      this.push.apply(this, items);\n    }\n  }\n\n  push(...items) {\n    super.push.apply(this.meta, items);\n    return super.push.apply(this, items.map(item => item.name));\n  }\n}\n\nexport default Result;\n","import Item from './item';\nimport Result from './result';\n\nfunction sortByWeight(a, b) {\n  if (a.weight > b.weight) {\n    return -1;\n  }\n\n  if (a.weight < b.weight) {\n    return 1;\n  }\n\n  return 0;\n}\n\nclass Fuzz extends Array {\n  constructor(collection, options = {}) {\n    super();\n    this.push.apply(this, collection);\n    this.main = this._prepareCollection();\n\n  }\n\n  parse(item) {\n    return item;\n  }\n\n  _prepareCollection() {\n    return this.map((item, i) => {\n      return new Item(this.parse(item), i);\n    });\n  }\n\n  match(string) {\n    let query = string.replace(/\\s+/g, '').toLowerCase();\n    let resultArray = this.main\n      .filter(item => item.calcMatch(query))\n      .sort(sortByWeight);\n\n    return new Result(resultArray);\n  }\n}\n\nFuzz.match = function(string, collection) {\n  var fuzz = new Fuzz(collection);\n  return fuzz.match(string);\n};\n\nexport default Fuzz;\n"],"sourceRoot":"/source/"}