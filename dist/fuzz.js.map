{"version":3,"sources":["fuzz.js","src/cache.js","src/item.js","src/result.js","src/result-item.js","src/fuzz.js"],"names":[],"mappings":";;;;;;;;AAAA,AAAC,CAAA,UAAU,MAAM,EAAE,OAAO,EAAE;AAC1B,SAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,MAAM,KAAK,WAAW,GAAG,MAAM,CAAC,OAAO,GAAG,OAAO,EAAE,GACzF,OAAO,MAAM,KAAK,UAAU,IAAI,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,GAC5D,MAAM,CAAC,IAAI,GAAG,OAAO,EAAE,CAAA;CACxB,CAAA,CAAC,IAAI,EAAE,YAAY;AAAE,cAAY,CAAC;;MCJd,KAAA;aAAA,KAAA;4BAAA,KAAA;;;iBAAA,KAAA;;aACV,qBAAG;AACV,YAAA,CAAK,GAAA,GAAM,IAAA,CAAA;AACX,YAAA,CAAK,KAAA,GAAQ,IAAA,CAAA;OACjB;;;aAEO,iBAAG;AACN,YAAA,CAAK,GAAA,GAAM,IAAA,CAAA;AACX,YAAA,CAAK,KAAA,GAAQ,IAAA,CAAA;OACjB;;;aAEO,eAAC,KAAA,EAAO;AACX,YAAI,CAAC,IAAA,CAAK,KAAA,IAAS,CAAC,KAAA,EAAO;AACzB,iBAAO,KAAA,CAAA;SACb;;AAEI,YAAI,KAAA,CAAM,MAAA,GAAS,IAAA,CAAK,KAAA,CAAM,MAAA,EAAQ;AACpC,iBAAO,KAAA,CAAA;SACb;;AAEI,YAAI,KAAA,KAAU,IAAA,CAAK,KAAA,EAAO;AACxB,iBAAO,IAAA,CAAA;SACb;;AAEI,YAAI,KAAA,CAAM,OAAA,CAAQ,IAAA,CAAK,KAAA,CAAA,KAAW,CAAA,EAAG;AACnC,iBAAO,IAAA,CAAA;SACb;;AAEI,eAAO,KAAA,CAAA;OACX;;;WA7BqB,KAAA;;;ACArB,WAAS,OAAA,CAAQ,IAAA,EAAM;AACrB,WAAO,IAAA,CAAK,WAAA,EAAA,KAAkB,IAAA,CAAA;GAChC;;AAEA,WAAS,WAAA,CAAY,IAAA,EAAM;AACzB,WAAO,KAAA,CAAK,IAAA,CAAK,IAAA,CAAA;MAAA;GACnB;;AAEA,WAAS,mBAAA,CAAoB,MAAA,EAAQ,KAAA,EAAO;AAC1C,WAAO,KAAA,KAAU,CAAA,IACd,KAAA,KAAU,CAAA,IAAK,OAAA,CAAQ,MAAA,CAAO,KAAA,CAAA,CAAA,IAC/B,OAAA,CAAQ,MAAA,CAAO,KAAA,CAAA,CAAA,IAAW,WAAA,CAAY,MAAA,CAAO,KAAA,GAAQ,CAAA,CAAA,CAAA,CAAA;GACzD;;AAEA,WAAS,eAAA,CAAgB,IAAA,EAAM,aAAA,EAAe,UAAA,EAAY,cAAA,EAAgB;AACxE,QAAM,cAAA,GAAiB,mBAAA,CAAoB,IAAA,EAAM,UAAA,CAAA,CAAA;;AAEjD,QAAI,MAAA,GAAS,CAAA,CAAA;;AAEb,QAAI,cAAA,EAAgB;AAClB,YAAA,IAAU,EAAA,CAAA;KACd;;AAEE,QAAI,aAAA,GAAgB,CAAA,EAAG;AACrB,YAAA,IAAW,EAAA,GAAM,EAAA,IAAM,aAAA,GAAgB,CAAA,CAAA,CAAA;KAC3C;;AAEE,QAAI,cAAA,IAAkB,CAAA,IAAK,UAAA,GAAa,cAAA,GAAiB,CAAA,EAAG;AAC1D,YAAA,IAAW,UAAA,GAAa,cAAA,CAAA;KAC5B;;AAEE,WAAO,MAAA,CAAA;GACT;;AAEA,WAAS,aAAA,CAAc,IAAA,EAAM;AAC3B,QAAI,KAAA,GAAQ,CAAA,CAAA;;AAEZ,QAAM,CAAA,GAAI,IAAA,CAAK,MAAA,CAAA;;AAEf,SAAK,IAAI,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,CAAA,EAAG,CAAA,EAAA,EAAK;AAC1B,UAAI,mBAAA,CAAoB,IAAA,EAAM,CAAA,CAAA,EAAI;AAChC,aAAA,EAAA,CAAA;OACN;KACA;;AAEE,WAAO,KAAA,CAAA;GACT;;MAEM,IAAA;AACO,aADP,IAAA,CACQ,IAAA,EAAM,KAAA,EAAO;4BADrB,IAAA;;AAEF,UAAA,CAAK,IAAA,GAAO,IAAA,CAAA;AACZ,UAAA,CAAK,SAAA,GAAY,KAAA,CAAA;KACrB;;iBAJM,IAAA;;aAMK,mBAAC,MAAA,EAAQ;AAChB,YAAI,aAAA,GAAgB,EAAA,CAAA;AACpB,YAAI,WAAA,GAAc,CAAC,CAAA,CAAA;AACnB,YAAI,SAAA,GAAY,IAAA,CAAA;AAChB,YAAI,MAAA,GAAS,CAAA,CAAA;AACb,YAAI,aAAA,GAAgB,CAAA,CAAA;;AAEpB,YAAM,CAAA,GAAI,MAAA,CAAO,MAAA,CAAA;AACjB,YAAM,aAAA,GAAgB,IAAA,CAAK,IAAA,CAAK,WAAA,EAAA,CAAA;;AAEhC,aAAK,IAAI,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,CAAA,EAAG,CAAA,EAAA,EAAK;AAC1B,cAAM,WAAA,GAAc,MAAA,CAAO,MAAA,CAAO,CAAA,CAAA,CAAA;;AAElC,cAAI,WAAA,IAAe,IAAA,CAAK,IAAA,CAAK,MAAA,EAAQ,OAAO,KAAA,CAAA;;AAE5C,cAAI,SAAA,EAAW;AACb,iBAAK,IAAI,CAAA,GAAI,WAAA,GAAc,CAAA,EAAG,CAAA,GAAI,IAAA,CAAK,IAAA,CAAK,MAAA,EAAQ,CAAA,EAAA,EAAK;AACvD,kBAAI,WAAA,KAAgB,IAAA,CAAK,IAAA,CAAK,CAAA,CAAA,CAAG,WAAA,EAAA,IAAiB,mBAAA,CAAoB,IAAA,CAAK,IAAA,EAAM,CAAA,CAAA,EAAI;AACnF,2BAAA,GAAc,CAAA,CAAA;AACd,sBAAA;eACZ;;AAEU,yBAAA,GAAc,CAAC,CAAA,CAAA;aACzB;WACA,MAAa;AACL,uBAAA,GAAc,aAAA,CAAc,OAAA,CAAQ,WAAA,EAAa,WAAA,GAAc,CAAA,CAAA,CAAA;WACvE;;AAEM,cAAI,WAAA,GAAc,CAAC,CAAA,EAAG;AACpB,gBAAI,aAAA,CAAc,aAAA,CAAc,MAAA,GAAS,CAAA,CAAA,KAAO,WAAA,GAAc,CAAA,EAAG;AAC/D,2BAAA,EAAA,CAAA;aACV,MAAe;AACL,2BAAA,GAAgB,CAAA,CAAA;aAC1B;;AAEQ,yBAAA,CAAc,IAAA,CAAK,WAAA,CAAA,CAAA;AACnB,kBAAA,IAAU,eAAA,CACR,IAAA,CAAK,IAAA,EACL,aAAA,EACA,WAAA,EACA,aAAA,CAAc,aAAA,CAAc,MAAA,GAAS,CAAA,CAAA,CAC/C,CAAA;;AAEQ,qBAAA;WACR;;AAEM,cAAI,CAAC,SAAA,EAAW;AACd,yBAAA,GAAgB,EAAA,CAAA;AAChB,kBAAA;WACR;;AAEM,WAAA,IAAK,CAAA,CAAA;AACL,qBAAA,GAAc,aAAA,CAAc,aAAA,CAAc,MAAA,GAAS,CAAA,CAAA,IAAM,CAAC,CAAA,CAAA;AAC1D,mBAAA,GAAY,CAAC,SAAA,CAAA;SACnB;;AAEI,YAAI,CAAC,aAAA,CAAc,MAAA,EAAQ;AACzB,iBAAO,KAAA,CAAA;SACb;;AAEI,YAAM,YAAA,GAAe,aAAA,CAAc,IAAA,CAAK,IAAA,CAAA,CAAA;;AAExC,cAAA,GAAS,MAAA,GAAS,IAAA,CAAK,KAAA,CAAM,aAAA,CAAc,CAAA,CAAA,GAAK,GAAA,CAAA,GAAQ,YAAA,GAAe,CAAA,CAAA;;AAEvE,eAAO,MAAA,GAAS,CAAA,GAAI,MAAA,GAAS,CAAA,CAAA;OACjC;;;WAvEM,IAAA;;;AChDN,WAAS,YAAA,CAAa,CAAA,EAAG,CAAA,EAAG;AAC1B,WAAO,CAAA,CAAE,MAAA,GAAS,CAAA,CAAE,MAAA,CAAA;GACtB;;MAEqB,MAAA;cAAA,MAAA;;AACR,aADQ,MAAA,CACP,KAAA,EAAO;4BADA,MAAA;;AAEjB,iCAFiB,MAAA,6CAEjB;;AAEA,UAAI,CAAC,KAAA,CAAM,MAAA,EAAQ;AACjB,eAAO,KAAA,CAAA;OACb;;AAEI,UAAA,CAAK,IAAA,GAAO,KAAA,CAAM,IAAA,CAAK,YAAA,CAAA,CAAA;AACvB,iCATiB,MAAA,2BASN,KAAA,CAAM,IAAA,EAAM,IAAA,CAAK,IAAA,CAAK,GAAA,CAAI,UAAA,UAAA;eAAc,UAAA,CAAW,IAAA,CAAK,IAAA;OAAA,CAAA,CAAA,CAAA;KACvE;;WAVqB,MAAA;KAAe,KAAA;;MCJf,UAAA,GACR,SADQ,UAAA,CACP,IAAA,EAAM,MAAA,EAAQ;0BADP,UAAA;;AAEjB,QAAA,CAAK,IAAA,GAAO,IAAA,CAAA;AACZ,QAAA,CAAK,MAAA,GAAS,MAAA,CAAA;GAClB;;ACCA,WAAS,OAAA,CAAQ,IAAA,EAAM;AACrB,QAAI,KAAA,CAAM,OAAA,EAAS,OAAO,KAAA,CAAM,OAAA,CAAQ,IAAA,CAAA,CAAA;AACxC,WAAO,SAAA,CAAS,IAAA,CAAK,MAAA,CAAO,SAAA,CAAU,QAAA,CAAS,IAAA,CAAK,IAAA,CAAA,CAAA;MAAA;GACtD;;MAEM,IAAA;cAAA,IAAA;;AACO,aADP,IAAA,CACQ,UAAA,EAAY,OAAA,EAAS;4BAD7B,IAAA;;AAEF,iCAFE,IAAA,6CAEF;;AAEA,UAAI,CAAC,OAAA,CAAQ,UAAA,CAAA,EAAa;AACxB,cAAM,IAAI,KAAA,CAAM,qCAAA,CAAA,CAAA;OACtB;;AAEI,UAAA,CAAK,IAAA,CAAK,KAAA,CAAM,IAAA,EAAM,UAAA,CAAA,CAAA;AACtB,UAAA,CAAK,IAAA,GAAO,IAAA,CAAK,kBAAA,EAAA,CAAA;AACjB,UAAA,CAAK,OAAA,GAAU,MAAA,CAAO,MAAA,CAAO;AAC3B,oBAAA,EAAc,KAAA;OACpB,EAAO,OAAA,CAAA,CAAA;AACH,UAAA,CAAK,KAAA,GAAQ,IAAI,KAAA,EAAA,CAAA;KACrB;;iBAdM,IAAA;;aAgBC,eAAC,IAAA,EAAM;AACV,eAAO,IAAA,CAAA;OACX;;;aAEoB,8BAAG;;;AACnB,eAAO,IAAA,CAAK,GAAA,CAAI,UAAC,IAAA,EAAM,CAAA,EAAM;AAC3B,cAAI,OAAO,IAAA,KAAS,QAAA,EAAU;AAC5B,kBAAM,IAAI,KAAA,CAAM,gDAAA,CAAA,CAAA;WACxB;;AAEM,iBAAO,IAAI,IAAA,CAAK,MAAK,KAAA,CAAM,IAAA,CAAA,EAAO,CAAA,CAAA,CAAA;SACxC,CAAA,CAAA;OACA;;;aAEO,eAAC,MAAA,EAAQ;AACZ,YAAM,KAAA,GAAQ,MAAA,CAAO,OAAA,CAAQ,MAAA,EAAQ,EAAA,CAAA,CAAI,WAAA,EAAA,CAAA;AACzC,YAAM,MAAA,GAAS,CAAC,IAAA,CAAK,OAAA,CAAQ,YAAA,IAAgB,IAAA,CAAK,KAAA,CAAM,KAAA,CAAM,KAAA,CAAA,CAAA;;AAE9D,YAAI,WAAA,GAAc,IAAA,CAAK,IAAA,CAAA;;AAEvB,YAAI,MAAA,EAAQ;AACV,qBAAA,GAAc,IAAA,CAAK,KAAA,CAAM,GAAA,CAAA;SAC/B,MAAW;AACL,cAAA,CAAK,KAAA,CAAM,KAAA,EAAA,CAAA;SACjB;;AAEI,YAAM,WAAA,GAAc,WAAA,CAAY,MAAA,CAAO,UAAC,GAAA,EAAK,IAAA,EAAS;AACpD,cAAM,UAAA,GAAa,MAAA,GAAS,IAAA,CAAK,IAAA,GAAO,IAAA,CAAA;;AAExC,cAAM,MAAA,GAAS,UAAA,CAAW,SAAA,CAAU,KAAA,CAAA,CAAA;;AAEpC,cAAI,MAAA,KAAW,KAAA,EAAO;AACpB,eAAA,CAAI,IAAA,CAAK,IAAI,UAAA,CAAW,UAAA,EAAY,MAAA,CAAA,CAAA,CAAA;WAC5C;;AAEM,iBAAO,GAAA,CAAA;SACb,EAAO,EAAA,CAAA,CAAA;;AAEH,YAAA,CAAK,KAAA,CAAM,GAAA,GAAM,WAAA,CAAA;AACjB,YAAA,CAAK,KAAA,CAAM,KAAA,GAAQ,KAAA,CAAA;;AAEnB,eAAO,IAAI,MAAA,CAAO,WAAA,CAAA,CAAA;OACtB;;;aAEa,qBAAC,MAAA,EAAQ;AAClB,YAAM,UAAA,GAAa,IAAI,MAAA,CAAO,MAAA,CAAO,KAAA,CAAM,EAAA,CAAA,CAAI,IAAA,CAAK,KAAA,CAAA,EAAQ,GAAA,CAAA,CAAA;AAC5D,eAAO,IAAA,CAAK,MAAA,CAAO,UAAA,IAAA,EAAQ;AACzB,iBAAO,UAAA,CAAW,IAAA,CAAK,IAAA,CAAA,CAAA;SAC7B,CAAA,CAAA;OACA;;;aAEc,eAAC,MAAA,EAAQ,UAAA,EAAY;AAC/B,eAAO,AAAC,IAAI,IAAA,CAAK,UAAA,CAAA,CAAa,KAAA,CAAM,MAAA,CAAA,CAAA;OACxC;;;WArEM,IAAA;KAAa,KAAA;;AAVnB,MAAA,IAAA,GAAA,IAAA,CAAA;;ALuQE,SAAO,IAAI,CAAC;CAEb,CAAC,CAAE","file":"fuzz.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  global.Fuzz = factory()\n}(this, function () { 'use strict';\n\n  class Cache {\n    construct() {\n      this.arr = null;\n      this.query = null;\n    }\n\n    clean() {\n      this.arr = null;\n      this.query = null;\n    }\n\n    check(query) {\n      if (!this.query || !query) {\n        return false;\n      }\n\n      if (query.length < this.query.length) {\n        return false;\n      }\n\n      if (query === this.query) {\n        return true;\n      }\n\n      if (query.indexOf(this.query) === 0) {\n        return true;\n      }\n\n      return false;\n    }\n  }\n\n  function isUpper(char) {\n    return char.toUpperCase() === char;\n  }\n\n  function nonWordChar(char) {\n    return /\\W/.test(char);\n  }\n\n  function indexIsSectionStart(string, index) {\n    return index === 0 ||\n      (index === 1 && isUpper(string[index])) ||\n      isUpper(string[index]) || nonWordChar(string[index - 1]);\n  }\n\n  function calculateWeight(name, substringSize, matchIndex, lastMatchIndex) {\n    const isSectionStart = indexIsSectionStart(name, matchIndex);\n\n    let weight = 0;\n\n    if (isSectionStart) {\n      weight += 85;\n    }\n\n    if (substringSize > 1) {\n      weight += (50 + (14 * (substringSize - 1)));\n    }\n\n    if (lastMatchIndex >= 0 && matchIndex - lastMatchIndex > 0) {\n      weight -= (matchIndex - lastMatchIndex);\n    }\n\n    return weight;\n  }\n\n  function countSections(name) {\n    let count = 0;\n\n    const l = name.length;\n\n    for (let i = 0; i < l; i++) {\n      if (indexIsSectionStart(name, i)) {\n        count++;\n      }\n    }\n\n    return count;\n  }\n\n  class Item {\n    constructor(name, index) {\n      this.name = name;\n      this.mainIndex = index;\n    }\n\n    calcMatch(string) {\n      let matchIndexArr = [];\n      let searchIndex = -1;\n      let lookUpper = true;\n      let weight = 0;\n      let substringSize = 1;\n\n      const l = string.length;\n      const lowerTestName = this.name.toLowerCase();\n\n      for (let i = 0; i < l; i++) {\n        const currentChar = string.charAt(i);\n\n        if (searchIndex >= this.name.length) return false;\n\n        if (lookUpper) {\n          for (let j = searchIndex + 1; j < this.name.length; j++) {\n            if (currentChar === this.name[j].toLowerCase() && indexIsSectionStart(this.name, j)) {\n              searchIndex = j;\n              break;\n            }\n\n            searchIndex = -1;\n          }\n        } else {\n          searchIndex = lowerTestName.indexOf(currentChar, searchIndex + 1);\n        }\n\n        if (searchIndex > -1) {\n          if (matchIndexArr[matchIndexArr.length - 1] === searchIndex - 1) {\n            substringSize++;\n          } else {\n            substringSize = 1;\n          }\n\n          matchIndexArr.push(searchIndex);\n          weight += calculateWeight(\n            this.name,\n            substringSize,\n            searchIndex,\n            matchIndexArr[matchIndexArr.length - 2]\n          );\n\n          continue;\n        }\n\n        if (!lookUpper) {\n          matchIndexArr = [];\n          break;\n        }\n\n        i -= 1;\n        searchIndex = matchIndexArr[matchIndexArr.length - 1] || -1;\n        lookUpper = !lookUpper;\n      }\n\n      if (!matchIndexArr.length) {\n        return false;\n      }\n\n      const sectionCount = countSections(this.name);\n\n      weight = weight - Math.round(matchIndexArr[0] * 1.2) - (sectionCount * l);\n\n      return weight > 0 ? weight : 0;\n    }\n  }\n\n  function sortByWeight(a, b) {\n    return b.weight - a.weight;\n  }\n\n  class Result extends Array {\n    constructor(items) {\n      super();\n\n      if (!items.length) {\n        return false;\n      }\n\n      this.meta = items.sort(sortByWeight);\n      super.push.apply(this, this.meta.map(resultItem => resultItem.item.name));\n    }\n  }\n\n  class ResultItem {\n    constructor(item, weight) {\n      this.item = item;\n      this.weight = weight;\n    }\n  }\n\n  function isArray(item) {\n    if (Array.isArray) return Array.isArray(item);\n    return /array/i.test(Object.prototype.toString.call(item));\n  }\n\n  class Fuzz extends Array {\n    constructor(collection, options) {\n      super();\n\n      if (!isArray(collection)) {\n        throw new Error('Argument to Fuzz should be an array');\n      }\n\n      this.push.apply(this, collection);\n      this.main = this._prepareCollection();\n      this.options = Object.assign({\n        disableCache: false,\n      }, options);\n      this.cache = new Cache();\n    }\n\n    parse(item) {\n      return item;\n    }\n\n    _prepareCollection() {\n      return this.map((item, i) => {\n        if (typeof item !== 'string') {\n          throw new Error('Argument to Fuzz should be an array of strings');\n        }\n\n        return new Item(this.parse(item), i);\n      });\n    }\n\n    match(string) {\n      const query = string.replace(/\\s+/g, '').toLowerCase();\n      const cached = !this.options.disableCache && this.cache.check(query);\n\n      let searchArray = this.main;\n\n      if (cached) {\n        searchArray = this.cache.arr;\n      } else {\n        this.cache.clean();\n      }\n\n      const resultArray = searchArray.reduce((arr, item) => {\n        const searchItem = cached ? item.item : item;\n\n        const weight = searchItem.calcMatch(query);\n\n        if (weight !== false) {\n          arr.push(new ResultItem(searchItem, weight));\n        }\n\n        return arr;\n      }, []);\n\n      this.cache.arr = resultArray;\n      this.cache.query = query;\n\n      return new Result(resultArray);\n    }\n\n    simpleMatch(string) {\n      const queryRegex = new RegExp(string.split('').join('.*?'), 'i');\n      return this.filter(item => {\n        return queryRegex.test(item);\n      });\n    }\n\n    static match(string, collection) {\n      return (new Fuzz(collection)).match(string);\n    }\n  }\n\n  var fuzz = Fuzz;\n\n  return fuzz;\n\n}));\n","export default class Cache {\n  construct() {\n    this.arr = null;\n    this.query = null;\n  }\n\n  clean() {\n    this.arr = null;\n    this.query = null;\n  }\n\n  check(query) {\n    if (!this.query || !query) {\n      return false;\n    }\n\n    if (query.length < this.query.length) {\n      return false;\n    }\n\n    if (query === this.query) {\n      return true;\n    }\n\n    if (query.indexOf(this.query) === 0) {\n      return true;\n    }\n\n    return false;\n  }\n}\n","function isUpper(char) {\n  return char.toUpperCase() === char;\n}\n\nfunction nonWordChar(char) {\n  return /\\W/.test(char);\n}\n\nfunction indexIsSectionStart(string, index) {\n  return index === 0 ||\n    (index === 1 && isUpper(string[index])) ||\n    isUpper(string[index]) || nonWordChar(string[index - 1]);\n}\n\nfunction calculateWeight(name, substringSize, matchIndex, lastMatchIndex) {\n  const isSectionStart = indexIsSectionStart(name, matchIndex);\n\n  let weight = 0;\n\n  if (isSectionStart) {\n    weight += 85;\n  }\n\n  if (substringSize > 1) {\n    weight += (50 + (14 * (substringSize - 1)));\n  }\n\n  if (lastMatchIndex >= 0 && matchIndex - lastMatchIndex > 0) {\n    weight -= (matchIndex - lastMatchIndex);\n  }\n\n  return weight;\n}\n\nfunction countSections(name) {\n  let count = 0;\n\n  const l = name.length;\n\n  for (let i = 0; i < l; i++) {\n    if (indexIsSectionStart(name, i)) {\n      count++;\n    }\n  }\n\n  return count;\n}\n\nclass Item {\n  constructor(name, index) {\n    this.name = name;\n    this.mainIndex = index;\n  }\n\n  calcMatch(string) {\n    let matchIndexArr = [];\n    let searchIndex = -1;\n    let lookUpper = true;\n    let weight = 0;\n    let substringSize = 1;\n\n    const l = string.length;\n    const lowerTestName = this.name.toLowerCase();\n\n    for (let i = 0; i < l; i++) {\n      const currentChar = string.charAt(i);\n\n      if (searchIndex >= this.name.length) return false;\n\n      if (lookUpper) {\n        for (let j = searchIndex + 1; j < this.name.length; j++) {\n          if (currentChar === this.name[j].toLowerCase() && indexIsSectionStart(this.name, j)) {\n            searchIndex = j;\n            break;\n          }\n\n          searchIndex = -1;\n        }\n      } else {\n        searchIndex = lowerTestName.indexOf(currentChar, searchIndex + 1);\n      }\n\n      if (searchIndex > -1) {\n        if (matchIndexArr[matchIndexArr.length - 1] === searchIndex - 1) {\n          substringSize++;\n        } else {\n          substringSize = 1;\n        }\n\n        matchIndexArr.push(searchIndex);\n        weight += calculateWeight(\n          this.name,\n          substringSize,\n          searchIndex,\n          matchIndexArr[matchIndexArr.length - 2]\n        );\n\n        continue;\n      }\n\n      if (!lookUpper) {\n        matchIndexArr = [];\n        break;\n      }\n\n      i -= 1;\n      searchIndex = matchIndexArr[matchIndexArr.length - 1] || -1;\n      lookUpper = !lookUpper;\n    }\n\n    if (!matchIndexArr.length) {\n      return false;\n    }\n\n    const sectionCount = countSections(this.name);\n\n    weight = weight - Math.round(matchIndexArr[0] * 1.2) - (sectionCount * l);\n\n    return weight > 0 ? weight : 0;\n  }\n}\n\nexport default Item;\n","function sortByWeight(a, b) {\n  return b.weight - a.weight;\n}\n\nexport default class Result extends Array {\n  constructor(items) {\n    super();\n\n    if (!items.length) {\n      return false;\n    }\n\n    this.meta = items.sort(sortByWeight);\n    super.push.apply(this, this.meta.map(resultItem => resultItem.item.name));\n  }\n}\n","export default class ResultItem {\n  constructor(item, weight) {\n    this.item = item;\n    this.weight = weight;\n  }\n}\n","import Cache from './cache';\nimport Item from './item';\nimport Result from './result';\nimport ResultItem from './result-item';\n\nfunction isArray(item) {\n  if (Array.isArray) return Array.isArray(item);\n  return /array/i.test(Object.prototype.toString.call(item));\n}\n\nclass Fuzz extends Array {\n  constructor(collection, options) {\n    super();\n\n    if (!isArray(collection)) {\n      throw new Error('Argument to Fuzz should be an array');\n    }\n\n    this.push.apply(this, collection);\n    this.main = this._prepareCollection();\n    this.options = Object.assign({\n      disableCache: false,\n    }, options);\n    this.cache = new Cache();\n  }\n\n  parse(item) {\n    return item;\n  }\n\n  _prepareCollection() {\n    return this.map((item, i) => {\n      if (typeof item !== 'string') {\n        throw new Error('Argument to Fuzz should be an array of strings');\n      }\n\n      return new Item(this.parse(item), i);\n    });\n  }\n\n  match(string) {\n    const query = string.replace(/\\s+/g, '').toLowerCase();\n    const cached = !this.options.disableCache && this.cache.check(query);\n\n    let searchArray = this.main;\n\n    if (cached) {\n      searchArray = this.cache.arr;\n    } else {\n      this.cache.clean();\n    }\n\n    const resultArray = searchArray.reduce((arr, item) => {\n      const searchItem = cached ? item.item : item;\n\n      const weight = searchItem.calcMatch(query);\n\n      if (weight !== false) {\n        arr.push(new ResultItem(searchItem, weight));\n      }\n\n      return arr;\n    }, []);\n\n    this.cache.arr = resultArray;\n    this.cache.query = query;\n\n    return new Result(resultArray);\n  }\n\n  simpleMatch(string) {\n    const queryRegex = new RegExp(string.split('').join('.*?'), 'i');\n    return this.filter(item => {\n      return queryRegex.test(item);\n    });\n  }\n\n  static match(string, collection) {\n    return (new Fuzz(collection)).match(string);\n  }\n}\n\nexport default Fuzz;\n"],"sourceRoot":"/source/"}