{"version":3,"sources":["fuzz.js","src/item.js","src/result.js","src/result-item.js","src/fuzz.js"],"names":[],"mappings":"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","file":"fuzz.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  global.Fuzz = factory()\n}(this, function () { 'use strict';\n\n  class Item {\n    constructor(name, index) {\n      this.name = name;\n      this.mainIndex = index;\n      this._detailedArray = this._prepareItem();\n    }\n\n    _prepareItem() {\n      function indexIsSectionStart(string, index) {\n        return index === 0 ||\n          (string[index].toUpperCase() === string[index] &&\n            (index === 1 ||\n              string[index - 1].toUpperCase() !== string[index - 1]));\n      }\n\n      return this.name.split('').map((char, index, arr) => {\n        return {\n          index,\n          char,\n          beginSection: indexIsSectionStart(arr, index),\n        };\n      });\n    }\n\n    calcMatch(string) {\n      let matchIndexArr = [];\n      let searchIndex = -1;\n      let lookUpper = true;\n\n      const l = string.length;\n      const lowerTestName = this.name.toLowerCase();\n\n      for (let i = 0; i < l; i++) {\n        const currentChar = string.charAt(i);\n\n        if (searchIndex >= this.name.length) return false;\n\n        searchIndex = (lookUpper ? this.name : lowerTestName).indexOf(\n          lookUpper ? currentChar.toUpperCase() : currentChar,\n          searchIndex + 1\n        );\n\n        if (searchIndex > -1) {\n          matchIndexArr.push(searchIndex);\n          continue;\n        }\n\n        if (!lookUpper) {\n          matchIndexArr = [];\n          break;\n        }\n\n        i -= 1;\n        searchIndex = matchIndexArr[matchIndexArr.length - 1] || -1;\n        lookUpper = !lookUpper;\n      }\n\n      return !!matchIndexArr.length && this._calculateWeight(matchIndexArr);\n    }\n\n    _calculateWeight(matchIndexArr) {\n      let substringSize = 0;\n\n      return matchIndexArr.reduce((weight, matchIndex, index) => {\n        let weightCalc = weight;\n        let tempWeight = 0;\n\n        if (this._detailedArray[matchIndex].beginSection === true) {\n          tempWeight = (80 - matchIndex);\n          weightCalc += tempWeight;\n\n          if (matchIndexArr[index - 1] === matchIndex - 1) {\n            substringSize++;\n            tempWeight += 15 * Math.pow(2, substringSize) - matchIndex;\n            weightCalc += tempWeight;\n          }\n        } else if (matchIndexArr[index - 1] === matchIndex - 1) {\n          substringSize++;\n          tempWeight = 15 * Math.pow(2, substringSize) - matchIndex;\n          weightCalc += tempWeight;\n        } else {\n          tempWeight = 10 - matchIndex;\n          weightCalc += tempWeight;\n        }\n\n        weightCalc -= ((this.name.length - 1) - matchIndexArr[matchIndexArr.length - 1]);\n\n        return weightCalc;\n      }, 0);\n    }\n  }\n\n  function sortByWeight(a, b) {\n    return b.weight - a.weight;\n  }\n\n  class Result extends Array {\n    constructor(items) {\n      super();\n\n      if (!items.length) {\n        return false;\n      }\n\n      this.meta = items.sort(sortByWeight);\n      super.push.apply(this, this.meta.map(resultItem => resultItem.item.name));\n    }\n  }\n\n  class ResultItem {\n    constructor(item, weight) {\n      this.item = item;\n      this.weight = weight;\n    }\n  }\n\n  function isArray(item) {\n    if (Array.isArray) return Array.isArray(item);\n    return /array/i.test(Object.prototype.toString.call(item));\n  }\n\n  class Fuzz extends Array {\n    constructor(collection) {\n      super();\n\n      if (!isArray(collection)) {\n        throw new Error('Argument to Fuzz should be an array');\n      }\n\n      this.push.apply(this, collection);\n      this.main = this._prepareCollection();\n    }\n\n    parse(item) {\n      return item;\n    }\n\n    _prepareCollection() {\n      return this.map((item, i) => {\n        if (typeof item !== 'string') {\n          throw new Error('Argument to Fuzz should be an array of strings');\n        }\n\n        return new Item(this.parse(item), i);\n      });\n    }\n\n    match(string) {\n      const query = string.replace(/\\s+/g, '').toLowerCase();\n      const resultArray = this.main.reduce((arr, item) => {\n        const weight = item.calcMatch(query);\n\n        if (weight !== false) {\n          arr.push(new ResultItem(item, weight));\n        }\n\n        return arr;\n      }, []);\n\n      return new Result(resultArray);\n    }\n\n    simpleMatch(string) {\n      const queryRegex = new RegExp(string.split('').join('.*?'), 'i');\n      return this.filter(item => {\n        return queryRegex.test(item);\n      });\n    }\n  }\n\n  Fuzz.match = function match(string, collection) {\n    return (new Fuzz(collection)).match(string);\n  };\n\n  var fuzz = Fuzz;\n\n  return fuzz;\n\n}));\n","class Item {\n  constructor(name, index) {\n    this.name = name;\n    this.mainIndex = index;\n    this._detailedArray = this._prepareItem();\n  }\n\n  _prepareItem() {\n    function indexIsSectionStart(string, index) {\n      return index === 0 ||\n        (string[index].toUpperCase() === string[index] &&\n          (index === 1 ||\n            string[index - 1].toUpperCase() !== string[index - 1]));\n    }\n\n    return this.name.split('').map((char, index, arr) => {\n      return {\n        index,\n        char,\n        beginSection: indexIsSectionStart(arr, index),\n      };\n    });\n  }\n\n  calcMatch(string) {\n    let matchIndexArr = [];\n    let searchIndex = -1;\n    let lookUpper = true;\n\n    const l = string.length;\n    const lowerTestName = this.name.toLowerCase();\n\n    for (let i = 0; i < l; i++) {\n      const currentChar = string.charAt(i);\n\n      if (searchIndex >= this.name.length) return false;\n\n      searchIndex = (lookUpper ? this.name : lowerTestName).indexOf(\n        lookUpper ? currentChar.toUpperCase() : currentChar,\n        searchIndex + 1\n      );\n\n      if (searchIndex > -1) {\n        matchIndexArr.push(searchIndex);\n        continue;\n      }\n\n      if (!lookUpper) {\n        matchIndexArr = [];\n        break;\n      }\n\n      i -= 1;\n      searchIndex = matchIndexArr[matchIndexArr.length - 1] || -1;\n      lookUpper = !lookUpper;\n    }\n\n    return !!matchIndexArr.length && this._calculateWeight(matchIndexArr);\n  }\n\n  _calculateWeight(matchIndexArr) {\n    let substringSize = 0;\n\n    return matchIndexArr.reduce((weight, matchIndex, index) => {\n      let weightCalc = weight;\n      let tempWeight = 0;\n\n      if (this._detailedArray[matchIndex].beginSection === true) {\n        tempWeight = (80 - matchIndex);\n        weightCalc += tempWeight;\n\n        if (matchIndexArr[index - 1] === matchIndex - 1) {\n          substringSize++;\n          tempWeight += 15 * Math.pow(2, substringSize) - matchIndex;\n          weightCalc += tempWeight;\n        }\n      } else if (matchIndexArr[index - 1] === matchIndex - 1) {\n        substringSize++;\n        tempWeight = 15 * Math.pow(2, substringSize) - matchIndex;\n        weightCalc += tempWeight;\n      } else {\n        tempWeight = 10 - matchIndex;\n        weightCalc += tempWeight;\n      }\n\n      weightCalc -= ((this.name.length - 1) - matchIndexArr[matchIndexArr.length - 1]);\n\n      return weightCalc;\n    }, 0);\n  }\n}\n\nexport default Item;\n","function sortByWeight(a, b) {\n  return b.weight - a.weight;\n}\n\nexport default class Result extends Array {\n  constructor(items) {\n    super();\n\n    if (!items.length) {\n      return false;\n    }\n\n    this.meta = items.sort(sortByWeight);\n    super.push.apply(this, this.meta.map(resultItem => resultItem.item.name));\n  }\n}\n","export default class ResultItem {\n  constructor(item, weight) {\n    this.item = item;\n    this.weight = weight;\n  }\n}\n","import Item from './item';\nimport Result from './result';\nimport ResultItem from './result-item';\n\nfunction isArray(item) {\n  if (Array.isArray) return Array.isArray(item);\n  return /array/i.test(Object.prototype.toString.call(item));\n}\n\nclass Fuzz extends Array {\n  constructor(collection) {\n    super();\n\n    if (!isArray(collection)) {\n      throw new Error('Argument to Fuzz should be an array');\n    }\n\n    this.push.apply(this, collection);\n    this.main = this._prepareCollection();\n  }\n\n  parse(item) {\n    return item;\n  }\n\n  _prepareCollection() {\n    return this.map((item, i) => {\n      if (typeof item !== 'string') {\n        throw new Error('Argument to Fuzz should be an array of strings');\n      }\n\n      return new Item(this.parse(item), i);\n    });\n  }\n\n  match(string) {\n    const query = string.replace(/\\s+/g, '').toLowerCase();\n    const resultArray = this.main.reduce((arr, item) => {\n      const weight = item.calcMatch(query);\n\n      if (weight !== false) {\n        arr.push(new ResultItem(item, weight));\n      }\n\n      return arr;\n    }, []);\n\n    return new Result(resultArray);\n  }\n\n  simpleMatch(string) {\n    const queryRegex = new RegExp(string.split('').join('.*?'), 'i');\n    return this.filter(item => {\n      return queryRegex.test(item);\n    });\n  }\n}\n\nFuzz.match = function match(string, collection) {\n  return (new Fuzz(collection)).match(string);\n};\n\nexport default Fuzz;\n"],"sourceRoot":"/source/"}