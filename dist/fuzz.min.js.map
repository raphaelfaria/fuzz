{"version":3,"sources":["fuzz.min.js","/source/fuzz.js","/source/src/item.js","/source/src/result.js","/source/src/fuzz.js","/source/src/cache.js","/source/src/result-item.js"],"names":["_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_classCallCheck","instance","Constructor","_get","_x","_x2","_x3","_again","object","property","receiver","Function","desc","getOwnPropertyDescriptor","undefined","getter","get","call","parent","getPrototypeOf","_createClass","defineProperties","target","props","i","length","descriptor","defineProperty","key","protoProps","staticProps","global","factory","exports","module","define","amd","Fuzz","this","isUpper","char","toUpperCase","nonWordChar","test","indexIsSectionStart","string","index","calculateWeight","name","substringSize","matchIndex","lastMatchIndex","isSectionStart","weight","sortByWeight","a","b","isArray","item","Array","toString","Cache","arr","query","indexOf","Item","mainIndex","_this","matchIndexArr","ql","nl","lowerTestName","toLowerCase","searchIndex","currentChar","push","reduce","w","tempWeight","lastIndexDiff","Math","round","Result","_Array","items","meta","sort","apply","map","resultItem","ResultItem","_Array2","collection","options","Error","main","_prepareCollection","assign","disableCache","cache","_this2","parse","replace","cached","check","searchArray","clean","resultArray","searchItem","calcMatch","queryRegex","RegExp","split","join","filter","match","fuzz"],"mappings":"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","file":"fuzz.min.js","sourcesContent":["var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.Fuzz = factory();\n})(this, function () {\n  'use strict';\n\n  var Cache = (function () {\n    function Cache() {\n      _classCallCheck(this, Cache);\n    }\n\n    _createClass(Cache, [{\n      key: 'construct',\n      value: function construct() {\n        this.arr = null;\n        this.query = null;\n      }\n    }, {\n      key: 'clean',\n      value: function clean() {\n        this.arr = null;\n        this.query = null;\n      }\n    }, {\n      key: 'check',\n      value: function check(query) {\n        if (!this.query || !query) {\n          return false;\n        }\n\n        if (query.length < this.query.length) {\n          return false;\n        }\n\n        if (query === this.query) {\n          return true;\n        }\n\n        if (query.indexOf(this.query) === 0) {\n          return true;\n        }\n\n        return false;\n      }\n    }]);\n\n    return Cache;\n  })();\n\n  function isUpper(char) {\n    return char.toUpperCase() === char;\n  }\n\n  function nonWordChar(char) {\n    return (/\\W/.test(char)\n    );\n  }\n\n  function indexIsSectionStart(string, index) {\n    return index >= 0 && index === 0 || index === 1 && isUpper(string[index]) || isUpper(string[index]) || nonWordChar(string[index - 1]);\n  }\n\n  function calculateWeight(name, substringSize, matchIndex, lastMatchIndex) {\n    var isSectionStart = indexIsSectionStart(name, matchIndex);\n\n    var weight = 0;\n\n    if (isSectionStart) {\n      weight += 85;\n    }\n\n    if (substringSize > 1) {\n      weight += 50 + 14 * (substringSize - 1);\n    }\n\n    if (lastMatchIndex >= 0 && matchIndex - lastMatchIndex > 0) {\n      weight -= matchIndex - lastMatchIndex;\n    }\n\n    return weight;\n  }\n\n  var Item = (function () {\n    function Item(name, index) {\n      _classCallCheck(this, Item);\n\n      this.name = name;\n      this.mainIndex = index;\n    }\n\n    _createClass(Item, [{\n      key: 'calcMatch',\n      value: function calcMatch(query) {\n        var _this = this;\n\n        if (query.length > this.name.length) {\n          return false;\n        }\n\n        var matchIndexArr = [];\n        var ql = query.length;\n        var nl = this.name.length;\n        var lowerTestName = this.name.toLowerCase();\n\n        var searchIndex = 0;\n\n        for (var i = 0; i < ql; i++) {\n          var currentChar = query[i];\n\n          if (searchIndex >= nl) return false;\n\n          searchIndex = lowerTestName.indexOf(currentChar, searchIndex);\n\n          if (searchIndex === -1) {\n            return false;\n          }\n\n          matchIndexArr.push(searchIndex++);\n        }\n\n        var substringSize = 1;\n\n        var weight = matchIndexArr.reduce(function (w, matchIndex, index, arr) {\n          var tempWeight = w;\n\n          if (arr[index - 1] === matchIndex - 1) {\n            substringSize++;\n          } else {\n            substringSize = 1;\n          }\n\n          tempWeight += calculateWeight(_this.name, substringSize, matchIndex, arr[index - 1]);\n\n          return tempWeight;\n        }, 0);\n\n        var lastIndexDiff = nl - matchIndexArr[matchIndexArr.length - 1] - 1;\n\n        weight = weight - Math.round(matchIndexArr[0] * 1.2) - lastIndexDiff;\n\n        return weight > 0 ? weight : 0;\n      }\n    }]);\n\n    return Item;\n  })();\n\n  function sortByWeight(a, b) {\n    return b.weight - a.weight;\n  }\n\n  var Result = (function (_Array) {\n    _inherits(Result, _Array);\n\n    function Result(items) {\n      _classCallCheck(this, Result);\n\n      _get(Object.getPrototypeOf(Result.prototype), 'constructor', this).call(this);\n\n      if (!items.length) {\n        return false;\n      }\n\n      this.meta = items.sort(sortByWeight);\n      _get(Object.getPrototypeOf(Result.prototype), 'push', this).apply(this, this.meta.map(function (resultItem) {\n        return resultItem.item.name;\n      }));\n    }\n\n    return Result;\n  })(Array);\n\n  var ResultItem = function ResultItem(item, weight) {\n    _classCallCheck(this, ResultItem);\n\n    this.item = item;\n    this.weight = weight;\n  };\n\n  function isArray(item) {\n    if (Array.isArray) return Array.isArray(item);\n    return (/array/i.test(Object.prototype.toString.call(item))\n    );\n  }\n\n  var Fuzz = (function (_Array2) {\n    _inherits(Fuzz, _Array2);\n\n    function Fuzz(collection, options) {\n      _classCallCheck(this, Fuzz);\n\n      _get(Object.getPrototypeOf(Fuzz.prototype), 'constructor', this).call(this);\n\n      if (!isArray(collection)) {\n        throw new Error('Argument to Fuzz should be an array');\n      }\n\n      this.push.apply(this, collection);\n      this.main = this._prepareCollection();\n      this.options = Object.assign({\n        disableCache: false\n      }, options);\n      this.cache = new Cache();\n    }\n\n    _createClass(Fuzz, [{\n      key: 'parse',\n      value: function parse(item) {\n        return item;\n      }\n    }, {\n      key: '_prepareCollection',\n      value: function _prepareCollection() {\n        var _this2 = this;\n\n        return this.map(function (item, i) {\n          if (typeof item !== 'string') {\n            throw new Error('Argument to Fuzz should be an array of strings');\n          }\n\n          return new Item(_this2.parse(item), i);\n        });\n      }\n    }, {\n      key: 'match',\n      value: function match(string) {\n        var query = string.replace(/\\s+/g, '').toLowerCase();\n        var cached = !this.options.disableCache && this.cache.check(query);\n\n        var searchArray = this.main;\n\n        if (cached) {\n          searchArray = this.cache.arr;\n        } else {\n          this.cache.clean();\n        }\n\n        var resultArray = searchArray.reduce(function (arr, item) {\n          var searchItem = cached ? item.item : item;\n\n          var weight = searchItem.calcMatch(query);\n\n          if (weight !== false) {\n            arr.push(new ResultItem(searchItem, weight));\n          }\n\n          return arr;\n        }, []);\n\n        this.cache.arr = resultArray;\n        this.cache.query = query;\n\n        return new Result(resultArray);\n      }\n    }, {\n      key: 'simpleMatch',\n      value: function simpleMatch(string) {\n        var queryRegex = new RegExp(string.split('').join('.*?'), 'i');\n        return this.filter(function (item) {\n          return queryRegex.test(item);\n        });\n      }\n    }], [{\n      key: 'match',\n      value: function match(string, collection) {\n        return new Fuzz(collection, { disableCache: true }).match(string);\n      }\n    }]);\n\n    return Fuzz;\n  })(Array);\n\n  var fuzz = Fuzz;\n\n  return fuzz;\n});\n//# sourceMappingURL=fuzz.js.map\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  global.Fuzz = factory()\n}(this, function () { 'use strict';\n\n  class Cache {\n    construct() {\n      this.arr = null;\n      this.query = null;\n    }\n\n    clean() {\n      this.arr = null;\n      this.query = null;\n    }\n\n    check(query) {\n      if (!this.query || !query) {\n        return false;\n      }\n\n      if (query.length < this.query.length) {\n        return false;\n      }\n\n      if (query === this.query) {\n        return true;\n      }\n\n      if (query.indexOf(this.query) === 0) {\n        return true;\n      }\n\n      return false;\n    }\n  }\n\n  function isUpper(char) {\n    return char.toUpperCase() === char;\n  }\n\n  function nonWordChar(char) {\n    return /\\W/.test(char);\n  }\n\n  function indexIsSectionStart(string, index) {\n    return index >= 0 &&\n      index === 0 ||\n      (index === 1 && isUpper(string[index])) ||\n      isUpper(string[index]) || nonWordChar(string[index - 1]);\n  }\n\n  function calculateWeight(name, substringSize, matchIndex, lastMatchIndex) {\n    const isSectionStart = indexIsSectionStart(name, matchIndex);\n\n    let weight = 0;\n\n    if (isSectionStart) {\n      weight += 85;\n    }\n\n    if (substringSize > 1) {\n      weight += 50 + 14 * (substringSize - 1);\n    }\n\n    if (lastMatchIndex >= 0 && matchIndex - lastMatchIndex > 0) {\n      weight -= (matchIndex - lastMatchIndex);\n    }\n\n    return weight;\n  }\n\n  class Item {\n    constructor(name, index) {\n      this.name = name;\n      this.mainIndex = index;\n    }\n\n    calcMatch(query) {\n      if (query.length > this.name.length) {\n        return false;\n      }\n\n      const matchIndexArr = [];\n      const ql = query.length;\n      const nl = this.name.length;\n      const lowerTestName = this.name.toLowerCase();\n\n      let searchIndex = 0;\n\n      for (let i = 0; i < ql; i++) {\n        const currentChar = query[i];\n\n        if (searchIndex >= nl) return false;\n\n        searchIndex = lowerTestName.indexOf(currentChar, searchIndex);\n\n        if (searchIndex === -1) {\n          return false;\n        }\n\n        matchIndexArr.push(searchIndex++);\n      }\n\n      let substringSize = 1;\n\n      let weight = matchIndexArr.reduce((w, matchIndex, index, arr) => {\n        let tempWeight = w;\n\n        if (arr[index - 1] === matchIndex - 1) {\n          substringSize++;\n        } else {\n          substringSize = 1;\n        }\n\n        tempWeight += calculateWeight(\n          this.name,\n          substringSize,\n          matchIndex,\n          arr[index - 1]\n        );\n\n        return tempWeight;\n      }, 0);\n\n      const lastIndexDiff = nl - matchIndexArr[matchIndexArr.length - 1] - 1;\n\n      weight = weight - Math.round(matchIndexArr[0] * 1.2) - lastIndexDiff;\n\n      return weight > 0 ? weight : 0;\n    }\n  }\n\n  function sortByWeight(a, b) {\n    return b.weight - a.weight;\n  }\n\n  class Result extends Array {\n    constructor(items) {\n      super();\n\n      if (!items.length) {\n        return false;\n      }\n\n      this.meta = items.sort(sortByWeight);\n      super.push.apply(this, this.meta.map(resultItem => resultItem.item.name));\n    }\n  }\n\n  class ResultItem {\n    constructor(item, weight) {\n      this.item = item;\n      this.weight = weight;\n    }\n  }\n\n  function isArray(item) {\n    if (Array.isArray) return Array.isArray(item);\n    return /array/i.test(Object.prototype.toString.call(item));\n  }\n\n  class Fuzz extends Array {\n    constructor(collection, options) {\n      super();\n\n      if (!isArray(collection)) {\n        throw new Error('Argument to Fuzz should be an array');\n      }\n\n      this.push.apply(this, collection);\n      this.main = this._prepareCollection();\n      this.options = Object.assign({\n        disableCache: false,\n      }, options);\n      this.cache = new Cache();\n    }\n\n    parse(item) {\n      return item;\n    }\n\n    _prepareCollection() {\n      return this.map((item, i) => {\n        if (typeof item !== 'string') {\n          throw new Error('Argument to Fuzz should be an array of strings');\n        }\n\n        return new Item(this.parse(item), i);\n      });\n    }\n\n    match(string) {\n      const query = string.replace(/\\s+/g, '').toLowerCase();\n      const cached = !this.options.disableCache && this.cache.check(query);\n\n      let searchArray = this.main;\n\n      if (cached) {\n        searchArray = this.cache.arr;\n      } else {\n        this.cache.clean();\n      }\n\n      const resultArray = searchArray.reduce((arr, item) => {\n        const searchItem = cached ? item.item : item;\n\n        const weight = searchItem.calcMatch(query);\n\n        if (weight !== false) {\n          arr.push(new ResultItem(searchItem, weight));\n        }\n\n        return arr;\n      }, []);\n\n      this.cache.arr = resultArray;\n      this.cache.query = query;\n\n      return new Result(resultArray);\n    }\n\n    simpleMatch(string) {\n      const queryRegex = new RegExp(string.split('').join('.*?'), 'i');\n      return this.filter(item => {\n        return queryRegex.test(item);\n      });\n    }\n\n    static match(string, collection) {\n      return (new Fuzz(collection, { disableCache: true })).match(string);\n    }\n  }\n\n  var fuzz = Fuzz;\n\n  return fuzz;\n\n}));\n","function isUpper(char) {\n  return char.toUpperCase() === char;\n}\n\nfunction nonWordChar(char) {\n  return /\\W/.test(char);\n}\n\nfunction indexIsSectionStart(string, index) {\n  return index >= 0 &&\n    index === 0 ||\n    (index === 1 && isUpper(string[index])) ||\n    isUpper(string[index]) || nonWordChar(string[index - 1]);\n}\n\nfunction calculateWeight(name, substringSize, matchIndex, lastMatchIndex) {\n  const isSectionStart = indexIsSectionStart(name, matchIndex);\n\n  let weight = 0;\n\n  if (isSectionStart) {\n    weight += 85;\n  }\n\n  if (substringSize > 1) {\n    weight += 50 + 14 * (substringSize - 1);\n  }\n\n  if (lastMatchIndex >= 0 && matchIndex - lastMatchIndex > 0) {\n    weight -= (matchIndex - lastMatchIndex);\n  }\n\n  return weight;\n}\n\nclass Item {\n  constructor(name, index) {\n    this.name = name;\n    this.mainIndex = index;\n  }\n\n  calcMatch(query) {\n    if (query.length > this.name.length) {\n      return false;\n    }\n\n    const matchIndexArr = [];\n    const ql = query.length;\n    const nl = this.name.length;\n    const lowerTestName = this.name.toLowerCase();\n\n    let searchIndex = 0;\n\n    for (let i = 0; i < ql; i++) {\n      const currentChar = query[i];\n\n      if (searchIndex >= nl) return false;\n\n      searchIndex = lowerTestName.indexOf(currentChar, searchIndex);\n\n      if (searchIndex === -1) {\n        return false;\n      }\n\n      matchIndexArr.push(searchIndex++);\n    }\n\n    let substringSize = 1;\n\n    let weight = matchIndexArr.reduce((w, matchIndex, index, arr) => {\n      let tempWeight = w;\n\n      if (arr[index - 1] === matchIndex - 1) {\n        substringSize++;\n      } else {\n        substringSize = 1;\n      }\n\n      tempWeight += calculateWeight(\n        this.name,\n        substringSize,\n        matchIndex,\n        arr[index - 1]\n      );\n\n      return tempWeight;\n    }, 0);\n\n    const lastIndexDiff = nl - matchIndexArr[matchIndexArr.length - 1] - 1;\n\n    weight = weight - Math.round(matchIndexArr[0] * 1.2) - lastIndexDiff;\n\n    return weight > 0 ? weight : 0;\n  }\n}\n\nexport default Item;\n","function sortByWeight(a, b) {\n  return b.weight - a.weight;\n}\n\nexport default class Result extends Array {\n  constructor(items) {\n    super();\n\n    if (!items.length) {\n      return false;\n    }\n\n    this.meta = items.sort(sortByWeight);\n    super.push.apply(this, this.meta.map(resultItem => resultItem.item.name));\n  }\n}\n","import Cache from './cache';\nimport Item from './item';\nimport Result from './result';\nimport ResultItem from './result-item';\n\nfunction isArray(item) {\n  if (Array.isArray) return Array.isArray(item);\n  return /array/i.test(Object.prototype.toString.call(item));\n}\n\nclass Fuzz extends Array {\n  constructor(collection, options) {\n    super();\n\n    if (!isArray(collection)) {\n      throw new Error('Argument to Fuzz should be an array');\n    }\n\n    this.push.apply(this, collection);\n    this.main = this._prepareCollection();\n    this.options = Object.assign({\n      disableCache: false,\n    }, options);\n    this.cache = new Cache();\n  }\n\n  parse(item) {\n    return item;\n  }\n\n  _prepareCollection() {\n    return this.map((item, i) => {\n      if (typeof item !== 'string') {\n        throw new Error('Argument to Fuzz should be an array of strings');\n      }\n\n      return new Item(this.parse(item), i);\n    });\n  }\n\n  match(string) {\n    const query = string.replace(/\\s+/g, '').toLowerCase();\n    const cached = !this.options.disableCache && this.cache.check(query);\n\n    let searchArray = this.main;\n\n    if (cached) {\n      searchArray = this.cache.arr;\n    } else {\n      this.cache.clean();\n    }\n\n    const resultArray = searchArray.reduce((arr, item) => {\n      const searchItem = cached ? item.item : item;\n\n      const weight = searchItem.calcMatch(query);\n\n      if (weight !== false) {\n        arr.push(new ResultItem(searchItem, weight));\n      }\n\n      return arr;\n    }, []);\n\n    this.cache.arr = resultArray;\n    this.cache.query = query;\n\n    return new Result(resultArray);\n  }\n\n  simpleMatch(string) {\n    const queryRegex = new RegExp(string.split('').join('.*?'), 'i');\n    return this.filter(item => {\n      return queryRegex.test(item);\n    });\n  }\n\n  static match(string, collection) {\n    return (new Fuzz(collection, { disableCache: true })).match(string);\n  }\n}\n\nexport default Fuzz;\n","export default class Cache {\n  construct() {\n    this.arr = null;\n    this.query = null;\n  }\n\n  clean() {\n    this.arr = null;\n    this.query = null;\n  }\n\n  check(query) {\n    if (!this.query || !query) {\n      return false;\n    }\n\n    if (query.length < this.query.length) {\n      return false;\n    }\n\n    if (query === this.query) {\n      return true;\n    }\n\n    if (query.indexOf(this.query) === 0) {\n      return true;\n    }\n\n    return false;\n  }\n}\n","export default class ResultItem {\n  constructor(item, weight) {\n    this.item = item;\n    this.weight = weight;\n  }\n}\n"],"sourceRoot":"/source/"}