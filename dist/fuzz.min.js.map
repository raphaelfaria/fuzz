{"version":3,"sources":["fuzz.min.js","/source/fuzz.js","/source/src/result.js","/source/src/fuzz.js","/source/src/cache.js","/source/src/item.js","/source/src/result-item.js"],"names":["_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_classCallCheck","instance","Constructor","_get","_x","_x2","_x3","_again","object","property","receiver","Function","desc","getOwnPropertyDescriptor","undefined","getter","get","call","parent","getPrototypeOf","_createClass","defineProperties","target","props","i","length","descriptor","defineProperty","key","protoProps","staticProps","global","factory","exports","module","define","amd","Fuzz","this","sortByWeight","a","b","weight","isArray","item","Array","test","toString","Cache","arr","query","indexOf","Item","name","index","mainIndex","_detailedArray","_prepareItem","indexIsSectionStart","string","toUpperCase","split","map","char","beginSection","matchIndexArr","searchIndex","lookUpper","l","lowerTestName","toLowerCase","currentChar","charAt","push","_calculateWeight","_this","substringSize","reduce","matchIndex","weightCalc","tempWeight","Math","pow","Result","_Array","items","meta","sort","apply","resultItem","ResultItem","_Array2","collection","options","Error","main","_prepareCollection","assign","disableCache","cache","_this2","parse","replace","cached","check","searchArray","clean","resultArray","searchItem","calcMatch","queryRegex","RegExp","join","filter","match","fuzz"],"mappings":"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","file":"fuzz.min.js","sourcesContent":["var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.Fuzz = factory();\n})(this, function () {\n  'use strict';\n\n  var Cache = (function () {\n    function Cache() {\n      _classCallCheck(this, Cache);\n    }\n\n    _createClass(Cache, [{\n      key: 'construct',\n      value: function construct() {\n        this.arr = null;\n        this.query = null;\n      }\n    }, {\n      key: 'clean',\n      value: function clean() {\n        this.arr = null;\n        this.query = null;\n      }\n    }, {\n      key: 'check',\n      value: function check(query) {\n        if (!this.query || !query) {\n          return false;\n        }\n\n        if (query.length < this.query.length) {\n          return false;\n        }\n\n        if (query === this.query) {\n          return true;\n        }\n\n        if (query.indexOf(this.query) === 0) {\n          return true;\n        }\n\n        return false;\n      }\n    }]);\n\n    return Cache;\n  })();\n\n  var Item = (function () {\n    function Item(name, index) {\n      _classCallCheck(this, Item);\n\n      this.name = name;\n      this.mainIndex = index;\n      this._detailedArray = this._prepareItem();\n    }\n\n    _createClass(Item, [{\n      key: '_prepareItem',\n      value: function _prepareItem() {\n        function indexIsSectionStart(string, index) {\n          return index === 0 || string[index].toUpperCase() === string[index] && (index === 1 || string[index - 1].toUpperCase() !== string[index - 1]);\n        }\n\n        return this.name.split('').map(function (char, index, arr) {\n          return {\n            index: index,\n            char: char,\n            beginSection: indexIsSectionStart(arr, index)\n          };\n        });\n      }\n    }, {\n      key: 'calcMatch',\n      value: function calcMatch(string) {\n        var matchIndexArr = [];\n        var searchIndex = -1;\n        var lookUpper = true;\n\n        var l = string.length;\n        var lowerTestName = this.name.toLowerCase();\n\n        for (var i = 0; i < l; i++) {\n          var currentChar = string.charAt(i);\n\n          if (searchIndex >= this.name.length) return false;\n\n          searchIndex = (lookUpper ? this.name : lowerTestName).indexOf(lookUpper ? currentChar.toUpperCase() : currentChar, searchIndex + 1);\n\n          if (searchIndex > -1) {\n            matchIndexArr.push(searchIndex);\n            continue;\n          }\n\n          if (!lookUpper) {\n            matchIndexArr = [];\n            break;\n          }\n\n          i -= 1;\n          searchIndex = matchIndexArr[matchIndexArr.length - 1] || -1;\n          lookUpper = !lookUpper;\n        }\n\n        return !!matchIndexArr.length && this._calculateWeight(matchIndexArr);\n      }\n    }, {\n      key: '_calculateWeight',\n      value: function _calculateWeight(matchIndexArr) {\n        var _this = this;\n\n        var substringSize = 0;\n\n        return matchIndexArr.reduce(function (weight, matchIndex, index) {\n          var weightCalc = weight;\n          var tempWeight = 0;\n\n          if (_this._detailedArray[matchIndex].beginSection === true) {\n            tempWeight = 80 - matchIndex;\n            weightCalc += tempWeight;\n\n            if (matchIndexArr[index - 1] === matchIndex - 1) {\n              substringSize++;\n              tempWeight += 15 * Math.pow(2, substringSize) - matchIndex;\n              weightCalc += tempWeight;\n            }\n          } else if (matchIndexArr[index - 1] === matchIndex - 1) {\n            substringSize++;\n            tempWeight = 15 * Math.pow(2, substringSize) - matchIndex;\n            weightCalc += tempWeight;\n          } else {\n            tempWeight = 10 - matchIndex;\n            weightCalc += tempWeight;\n          }\n\n          weightCalc -= _this.name.length - 1 - matchIndexArr[matchIndexArr.length - 1];\n\n          return weightCalc;\n        }, 0);\n      }\n    }]);\n\n    return Item;\n  })();\n\n  function sortByWeight(a, b) {\n    return b.weight - a.weight;\n  }\n\n  var Result = (function (_Array) {\n    _inherits(Result, _Array);\n\n    function Result(items) {\n      _classCallCheck(this, Result);\n\n      _get(Object.getPrototypeOf(Result.prototype), 'constructor', this).call(this);\n\n      if (!items.length) {\n        return false;\n      }\n\n      this.meta = items.sort(sortByWeight);\n      _get(Object.getPrototypeOf(Result.prototype), 'push', this).apply(this, this.meta.map(function (resultItem) {\n        return resultItem.item.name;\n      }));\n    }\n\n    return Result;\n  })(Array);\n\n  var ResultItem = function ResultItem(item, weight) {\n    _classCallCheck(this, ResultItem);\n\n    this.item = item;\n    this.weight = weight;\n  };\n\n  function isArray(item) {\n    if (Array.isArray) return Array.isArray(item);\n    return (/array/i.test(Object.prototype.toString.call(item))\n    );\n  }\n\n  var Fuzz = (function (_Array2) {\n    _inherits(Fuzz, _Array2);\n\n    function Fuzz(collection, options) {\n      _classCallCheck(this, Fuzz);\n\n      _get(Object.getPrototypeOf(Fuzz.prototype), 'constructor', this).call(this);\n\n      if (!isArray(collection)) {\n        throw new Error('Argument to Fuzz should be an array');\n      }\n\n      this.push.apply(this, collection);\n      this.main = this._prepareCollection();\n      this.options = Object.assign({\n        disableCache: false\n      }, options);\n      this.cache = new Cache();\n    }\n\n    _createClass(Fuzz, [{\n      key: 'parse',\n      value: function parse(item) {\n        return item;\n      }\n    }, {\n      key: '_prepareCollection',\n      value: function _prepareCollection() {\n        var _this2 = this;\n\n        return this.map(function (item, i) {\n          if (typeof item !== 'string') {\n            throw new Error('Argument to Fuzz should be an array of strings');\n          }\n\n          return new Item(_this2.parse(item), i);\n        });\n      }\n    }, {\n      key: 'match',\n      value: function match(string) {\n        var query = string.replace(/\\s+/g, '').toLowerCase();\n        var cached = !this.options.disableCache && this.cache.check(query);\n\n        var searchArray = this.main;\n\n        if (cached) {\n          searchArray = this.cache.arr;\n        } else {\n          this.cache.clean();\n        }\n\n        var resultArray = searchArray.reduce(function (arr, item) {\n          var searchItem = cached ? item.item : item;\n\n          var weight = searchItem.calcMatch(query);\n\n          if (weight !== false) {\n            arr.push(new ResultItem(searchItem, weight));\n          }\n\n          return arr;\n        }, []);\n\n        this.cache.arr = resultArray;\n        this.cache.query = query;\n\n        return new Result(resultArray);\n      }\n    }, {\n      key: 'simpleMatch',\n      value: function simpleMatch(string) {\n        var queryRegex = new RegExp(string.split('').join('.*?'), 'i');\n        return this.filter(function (item) {\n          return queryRegex.test(item);\n        });\n      }\n    }], [{\n      key: 'match',\n      value: function match(string, collection) {\n        return new Fuzz(collection).match(string);\n      }\n    }]);\n\n    return Fuzz;\n  })(Array);\n\n  var fuzz = Fuzz;\n\n  return fuzz;\n});\n//# sourceMappingURL=fuzz.js.map\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  global.Fuzz = factory()\n}(this, function () { 'use strict';\n\n  class Cache {\n    construct() {\n      this.arr = null;\n      this.query = null;\n    }\n\n    clean() {\n      this.arr = null;\n      this.query = null;\n    }\n\n    check(query) {\n      if (!this.query || !query) {\n        return false;\n      }\n\n      if (query.length < this.query.length) {\n        return false;\n      }\n\n      if (query === this.query) {\n        return true;\n      }\n\n      if (query.indexOf(this.query) === 0) {\n        return true;\n      }\n\n      return false;\n    }\n  }\n\n  class Item {\n    constructor(name, index) {\n      this.name = name;\n      this.mainIndex = index;\n      this._detailedArray = this._prepareItem();\n    }\n\n    _prepareItem() {\n      function indexIsSectionStart(string, index) {\n        return index === 0 ||\n          (string[index].toUpperCase() === string[index] &&\n            (index === 1 ||\n              string[index - 1].toUpperCase() !== string[index - 1]));\n      }\n\n      return this.name.split('').map((char, index, arr) => {\n        return {\n          index,\n          char,\n          beginSection: indexIsSectionStart(arr, index),\n        };\n      });\n    }\n\n    calcMatch(string) {\n      let matchIndexArr = [];\n      let searchIndex = -1;\n      let lookUpper = true;\n\n      const l = string.length;\n      const lowerTestName = this.name.toLowerCase();\n\n      for (let i = 0; i < l; i++) {\n        const currentChar = string.charAt(i);\n\n        if (searchIndex >= this.name.length) return false;\n\n        searchIndex = (lookUpper ? this.name : lowerTestName).indexOf(\n          lookUpper ? currentChar.toUpperCase() : currentChar,\n          searchIndex + 1\n        );\n\n        if (searchIndex > -1) {\n          matchIndexArr.push(searchIndex);\n          continue;\n        }\n\n        if (!lookUpper) {\n          matchIndexArr = [];\n          break;\n        }\n\n        i -= 1;\n        searchIndex = matchIndexArr[matchIndexArr.length - 1] || -1;\n        lookUpper = !lookUpper;\n      }\n\n      return !!matchIndexArr.length && this._calculateWeight(matchIndexArr);\n    }\n\n    _calculateWeight(matchIndexArr) {\n      let substringSize = 0;\n\n      return matchIndexArr.reduce((weight, matchIndex, index) => {\n        let weightCalc = weight;\n        let tempWeight = 0;\n\n        if (this._detailedArray[matchIndex].beginSection === true) {\n          tempWeight = (80 - matchIndex);\n          weightCalc += tempWeight;\n\n          if (matchIndexArr[index - 1] === matchIndex - 1) {\n            substringSize++;\n            tempWeight += 15 * Math.pow(2, substringSize) - matchIndex;\n            weightCalc += tempWeight;\n          }\n        } else if (matchIndexArr[index - 1] === matchIndex - 1) {\n          substringSize++;\n          tempWeight = 15 * Math.pow(2, substringSize) - matchIndex;\n          weightCalc += tempWeight;\n        } else {\n          tempWeight = 10 - matchIndex;\n          weightCalc += tempWeight;\n        }\n\n        weightCalc -= ((this.name.length - 1) - matchIndexArr[matchIndexArr.length - 1]);\n\n        return weightCalc;\n      }, 0);\n    }\n  }\n\n  function sortByWeight(a, b) {\n    return b.weight - a.weight;\n  }\n\n  class Result extends Array {\n    constructor(items) {\n      super();\n\n      if (!items.length) {\n        return false;\n      }\n\n      this.meta = items.sort(sortByWeight);\n      super.push.apply(this, this.meta.map(resultItem => resultItem.item.name));\n    }\n  }\n\n  class ResultItem {\n    constructor(item, weight) {\n      this.item = item;\n      this.weight = weight;\n    }\n  }\n\n  function isArray(item) {\n    if (Array.isArray) return Array.isArray(item);\n    return /array/i.test(Object.prototype.toString.call(item));\n  }\n\n  class Fuzz extends Array {\n    constructor(collection, options) {\n      super();\n\n      if (!isArray(collection)) {\n        throw new Error('Argument to Fuzz should be an array');\n      }\n\n      this.push.apply(this, collection);\n      this.main = this._prepareCollection();\n      this.options = Object.assign({\n        disableCache: false,\n      }, options);\n      this.cache = new Cache();\n    }\n\n    parse(item) {\n      return item;\n    }\n\n    _prepareCollection() {\n      return this.map((item, i) => {\n        if (typeof item !== 'string') {\n          throw new Error('Argument to Fuzz should be an array of strings');\n        }\n\n        return new Item(this.parse(item), i);\n      });\n    }\n\n    match(string) {\n      const query = string.replace(/\\s+/g, '').toLowerCase();\n      const cached = !this.options.disableCache && this.cache.check(query);\n\n      let searchArray = this.main;\n\n      if (cached) {\n        searchArray = this.cache.arr;\n      } else {\n        this.cache.clean();\n      }\n\n      const resultArray = searchArray.reduce((arr, item) => {\n        const searchItem = cached ? item.item : item;\n\n        const weight = searchItem.calcMatch(query);\n\n        if (weight !== false) {\n          arr.push(new ResultItem(searchItem, weight));\n        }\n\n        return arr;\n      }, []);\n\n      this.cache.arr = resultArray;\n      this.cache.query = query;\n\n      return new Result(resultArray);\n    }\n\n    simpleMatch(string) {\n      const queryRegex = new RegExp(string.split('').join('.*?'), 'i');\n      return this.filter(item => {\n        return queryRegex.test(item);\n      });\n    }\n\n    static match(string, collection) {\n      return (new Fuzz(collection)).match(string);\n    }\n  }\n\n  var fuzz = Fuzz;\n\n  return fuzz;\n\n}));\n","function sortByWeight(a, b) {\n  return b.weight - a.weight;\n}\n\nexport default class Result extends Array {\n  constructor(items) {\n    super();\n\n    if (!items.length) {\n      return false;\n    }\n\n    this.meta = items.sort(sortByWeight);\n    super.push.apply(this, this.meta.map(resultItem => resultItem.item.name));\n  }\n}\n","import Cache from './cache';\nimport Item from './item';\nimport Result from './result';\nimport ResultItem from './result-item';\n\nfunction isArray(item) {\n  if (Array.isArray) return Array.isArray(item);\n  return /array/i.test(Object.prototype.toString.call(item));\n}\n\nclass Fuzz extends Array {\n  constructor(collection, options) {\n    super();\n\n    if (!isArray(collection)) {\n      throw new Error('Argument to Fuzz should be an array');\n    }\n\n    this.push.apply(this, collection);\n    this.main = this._prepareCollection();\n    this.options = Object.assign({\n      disableCache: false,\n    }, options);\n    this.cache = new Cache();\n  }\n\n  parse(item) {\n    return item;\n  }\n\n  _prepareCollection() {\n    return this.map((item, i) => {\n      if (typeof item !== 'string') {\n        throw new Error('Argument to Fuzz should be an array of strings');\n      }\n\n      return new Item(this.parse(item), i);\n    });\n  }\n\n  match(string) {\n    const query = string.replace(/\\s+/g, '').toLowerCase();\n    const cached = !this.options.disableCache && this.cache.check(query);\n\n    let searchArray = this.main;\n\n    if (cached) {\n      searchArray = this.cache.arr;\n    } else {\n      this.cache.clean();\n    }\n\n    const resultArray = searchArray.reduce((arr, item) => {\n      const searchItem = cached ? item.item : item;\n\n      const weight = searchItem.calcMatch(query);\n\n      if (weight !== false) {\n        arr.push(new ResultItem(searchItem, weight));\n      }\n\n      return arr;\n    }, []);\n\n    this.cache.arr = resultArray;\n    this.cache.query = query;\n\n    return new Result(resultArray);\n  }\n\n  simpleMatch(string) {\n    const queryRegex = new RegExp(string.split('').join('.*?'), 'i');\n    return this.filter(item => {\n      return queryRegex.test(item);\n    });\n  }\n\n  static match(string, collection) {\n    return (new Fuzz(collection)).match(string);\n  }\n}\n\nexport default Fuzz;\n","export default class Cache {\n  construct() {\n    this.arr = null;\n    this.query = null;\n  }\n\n  clean() {\n    this.arr = null;\n    this.query = null;\n  }\n\n  check(query) {\n    if (!this.query || !query) {\n      return false;\n    }\n\n    if (query.length < this.query.length) {\n      return false;\n    }\n\n    if (query === this.query) {\n      return true;\n    }\n\n    if (query.indexOf(this.query) === 0) {\n      return true;\n    }\n\n    return false;\n  }\n}\n","class Item {\n  constructor(name, index) {\n    this.name = name;\n    this.mainIndex = index;\n    this._detailedArray = this._prepareItem();\n  }\n\n  _prepareItem() {\n    function indexIsSectionStart(string, index) {\n      return index === 0 ||\n        (string[index].toUpperCase() === string[index] &&\n          (index === 1 ||\n            string[index - 1].toUpperCase() !== string[index - 1]));\n    }\n\n    return this.name.split('').map((char, index, arr) => {\n      return {\n        index,\n        char,\n        beginSection: indexIsSectionStart(arr, index),\n      };\n    });\n  }\n\n  calcMatch(string) {\n    let matchIndexArr = [];\n    let searchIndex = -1;\n    let lookUpper = true;\n\n    const l = string.length;\n    const lowerTestName = this.name.toLowerCase();\n\n    for (let i = 0; i < l; i++) {\n      const currentChar = string.charAt(i);\n\n      if (searchIndex >= this.name.length) return false;\n\n      searchIndex = (lookUpper ? this.name : lowerTestName).indexOf(\n        lookUpper ? currentChar.toUpperCase() : currentChar,\n        searchIndex + 1\n      );\n\n      if (searchIndex > -1) {\n        matchIndexArr.push(searchIndex);\n        continue;\n      }\n\n      if (!lookUpper) {\n        matchIndexArr = [];\n        break;\n      }\n\n      i -= 1;\n      searchIndex = matchIndexArr[matchIndexArr.length - 1] || -1;\n      lookUpper = !lookUpper;\n    }\n\n    return !!matchIndexArr.length && this._calculateWeight(matchIndexArr);\n  }\n\n  _calculateWeight(matchIndexArr) {\n    let substringSize = 0;\n\n    return matchIndexArr.reduce((weight, matchIndex, index) => {\n      let weightCalc = weight;\n      let tempWeight = 0;\n\n      if (this._detailedArray[matchIndex].beginSection === true) {\n        tempWeight = (80 - matchIndex);\n        weightCalc += tempWeight;\n\n        if (matchIndexArr[index - 1] === matchIndex - 1) {\n          substringSize++;\n          tempWeight += 15 * Math.pow(2, substringSize) - matchIndex;\n          weightCalc += tempWeight;\n        }\n      } else if (matchIndexArr[index - 1] === matchIndex - 1) {\n        substringSize++;\n        tempWeight = 15 * Math.pow(2, substringSize) - matchIndex;\n        weightCalc += tempWeight;\n      } else {\n        tempWeight = 10 - matchIndex;\n        weightCalc += tempWeight;\n      }\n\n      weightCalc -= ((this.name.length - 1) - matchIndexArr[matchIndexArr.length - 1]);\n\n      return weightCalc;\n    }, 0);\n  }\n}\n\nexport default Item;\n","export default class ResultItem {\n  constructor(item, weight) {\n    this.item = item;\n    this.weight = weight;\n  }\n}\n"],"sourceRoot":"/source/"}